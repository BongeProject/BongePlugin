import java.util.stream.Collectors

plugins {
    id 'java'
}

group = 'org.soak'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
}

java {
    toolchain {
        targetCompatibility = JavaVersion.valueOf("VERSION_" + property("JAVA_VERSION"))
        sourceCompatibility = JavaVersion.valueOf("VERSION_" + property("JAVA_VERSION"))
    }
}

dependencies {
    implementation project(':Wrapper')
    implementation project(':Common')
    implementation project(':MoseStream')
    implementation project(':Launch-Common')

    implementation 'org.spongepowered:spongeapi:' + property("SPONGE_VERSION")

    //implementation 'net.minecraftforge:fmlcore:1.19.4-45.2.8'
    //implementation 'net.minecraftforge:forgespi:6.0.0'
    //implementation 'commons-lang:commons-lang:2.6' //included with bukkit -> forced onto forge

    implementation 'io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT'
    implementation 'net.bytebuddy:byte-buddy:1.15.10'


    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.WARN

    dependsOn(":MoseStream:jar")
    dependsOn(":CollectionStream:jar")
    dependsOn(":Override:jar")

    var fat = configurations.runtimeClasspath.filter {
        return it.name.startsWith("Launch-Common")
                || it.name.startsWith("Common-")
                || it.name.startsWith("Wrapper-")
                || it.name.startsWith("MoseStream")
                || it.name.startsWith("CollectionStream")
                || it.name.startsWith("json-simple")
                || it.name.startsWith("paperlib")
                || it.name.startsWith("byte-buddy-")
                || it.name.startsWith("paper-api-")
                || it.name.startsWith("adventure-text-logger-slf4j-")
                || it.name.startsWith("bungeecord-chat-")
        /*|| it.name.equals("commons-lang-2.6.jar")*/
    }.collect {
        if (it.name.startsWith("paper-api-")) {
            return zipTree(it).matching {
                exclude "org/bukkit/configuration/file/YamlConfiguration.class"
            }
        }
        it.isDirectory() ? it : zipTree(it)
    }

    var folder = project.file("../Override/build/libs/");
    var files = folder.listFiles();
    if (files != null && files.length != 0) {

        var file = files[0]
        fat.add(zipTree(file))
    } else {
        new RuntimeException("Overrides was not found, this may lead to some compatibility issues").printStackTrace()
    }

    var excludeList = new String[]{"Material.class"}

    from(fat).exclude {
        return excludeList.contains(it.name);
    }
}

test {
    useJUnitPlatform()
}